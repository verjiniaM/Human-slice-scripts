import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import datetime
import os
import glob
import shutil

def copy_event_analysis_data_to_analysis_folder(event_type):
    '''
    moves current metadata.xlsx and the results.xlsx from spontaneous analysis folders to .../human/meta_events/
    loads results.xlsx - summary of event analysis
    '''
    results = '/Users/verjim/spontaneous-postsynaptic-currents-detection/results/results.xlsx'
    metadata = '/Users/verjim/spontaneous-postsynaptic-currents-detection/metadata/metadata.xlsx'
    date = str(datetime.date.today())

    human_dir = '/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/'
    shutil.copy(results, human_dir + '/meta_events/results/output_algirithm/' + event_type + '_' + date + '_results.xlsx')
    shutil.copy(metadata, human_dir + '/meta_events/analyzed_metadata/' + event_type + '_' + date + '_metadata.xlsx')

def get_n_numbers(results_df):
    n_nums = {}
    for tr in results_df['treatment'].unique():
        n_nums[tr] = [len(results_df[results_df['treatment'] == tr])]
    return n_nums

def post_events_analysis_add_metadata(event_type, human_dir = '/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/'):
    results = '/Users/verjim/spontaneous-postsynaptic-currents-detection/results/results.xlsx'
    metadata = '/Users/verjim/spontaneous-postsynaptic-currents-detection/metadata/metadata.xlsx'
    date = str(datetime.date.today())

    results_df = pd.read_excel(results, 'Summary results')
    meta_events = pd.read_excel(metadata)

    treatments, patchers, slices, cell_IDs, incubation_times = [], [], [], [], []
    for fn in results_df['Recording filename']:
        tr = meta_events['treatment'][meta_events['Name of recording'] == fn]
        patcher = meta_events['patcher'][meta_events['Name of recording'] == fn]
        slic = meta_events['slice'][meta_events['Name of recording'] == fn]
        hrs = meta_events['hrs_incubation'][meta_events['Name of recording'] == fn]
        #cell_ID = meta_events['cell_ID'][meta_events['Name of recording'] == fn]
        treatments.append(tr.tolist()[0])
        patchers.append(patcher.tolist()[0])
        slices.append(slic.tolist()[0])
        incubation_times.append(hrs.tolist()[0])
        #cell_IDs.append(cell_ID.tolist()[0])

    results_df.insert(2, 'treatment', treatments)
    results_df.insert(3, ' patcher', patchers)
    results_df.insert(4, ' slice', slices)
    results_df.insert(5, 'hrs_incubation', incubation_times)
    #results_df.insert(6, 'cell_ID', cell_IDs)

    #remove files where less than 2 min analysis
    for i in reversed(range(len(results_df))):
        if results_df['# analyzd sweeps'][i] < 12:
            results_df = results_df.drop([results_df.index[i]])
    results_df.reset_index(inplace = True, drop = True)

    n_nums = get_n_numbers(results_df)
    ns_df = pd.DataFrame(n_nums)

    with pd.ExcelWriter(human_dir + '/meta_events/results/' + event_type + '_' + date + '_summary_results.xlsx') as writer:
        results_df.to_excel(writer, sheet_name = "summary", index=False)
        ns_df.to_excel(writer, sheet_name = "n-nums", index=False)

    return results_df

 
def get_events_numbers(results_df_long):
    # human_dir + '/meta_events/results/output_algirithm/' + date + '_results.xlsx'
    num_events = {}
    for tr in results_df['treatment'].unique().tolist():
        fns = results_df['Recording filename'][results_df['treatment'] == tr].tolist()
        chans = results_df['Channel'][results_df['treatment'] == tr].tolist()
        number_of_events = []
        for i, fn in enumerate(fns):
            chan = chans[i]
            sheet_name = fn[:-4] + '_' + str(chan)
            fn_df = pd.read_excel(results_path, sheet_name)
            number_of_events.append(len(fn_df))
        num_events[tr] = number_of_events
    return num_events

# def add_incubation_time(results_df):
#     for op in results_df['OP'].unique():
#         for patcher in results_df['patcher'][results_df['OP'] == op].unique():


#%%

#%%

def post_event_analysis_main(event_type):
    copy_event_analysis_data_to_analysis_folder(event_type)
    results_df = post_events_analysis_add_metadata(event_type)
    
#%%
results_dir = '/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/meta_events/results/'

spontan_1 = pd.read_excel( results_dir + 'spontan_2022-11-07_summary_results.xlsx', 'summary')
spontan_2 = pd.read_excel( results_dir + 'spontan_2022-11-09_summary_results.xlsx', 'summary')
spontan_df = pd.concat([spontan_1.loc[:], spontan_2]).reset_index(drop=True)


for i in reversed(range(len(spontan_df))):
    if float(spontan_df['Average interevent interval (ms)'][i]) > 1000 :
        spontan_df = spontan_df.drop([spontan_df.index[i]])
        continue
spontan_df.reset_index(inplace = True, drop = True)

for i in reversed(range(len(spontan_df))):
    if float(spontan_df['Average amplitude (pA)'][i]) > 30 :
        spontan_df = spontan_df.drop([spontan_df.index[i]])
        continue
spontan_df.reset_index(inplace = True, drop = True)

days = []
for i in range(len(spontan_df)):
    if float(spontan_df['hrs_incubation'][i]) == 0:
        days.append('D1')
    else:
        days.append('D2')
spontan_df['day'] = days

for i in reversed(range(len(spontan_df))):
    if spontan_df['hrs_incubation'][i]  == 0:
        continue
    if float(spontan_df['hrs_incubation'][i]) < 24:
        spontan_df = spontan_df.drop([spontan_df.index[i]])
spontan_df.reset_index(inplace = True, drop = True)

spontan_df.boxplot(column=['Average amplitude (pA)'], by=['day', 'treatment'])

treatments = ['Ctrl', 'high K', 'TTX']
days = ['D1', 'D2']
nums_dict = {}
for day in days:
    for tr in treatments:
        nums_dict[day + ' ' + tr] = len(spontan_df[(spontan_df['day'] == day) & (spontan_df['treatment'] == tr)])

#%%

results_dir = '/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/meta_events/results/'

mini_1 = pd.read_excel( results_dir + 'minis_2022-11-04_summary_results.xlsx', 'summary')
mini_2 = pd.read_excel( results_dir + 'minis_2022-11-08_summary_results.xlsx', 'summary')
#mini_df = pd.concat([mini_1.loc[:], mini_2]).reset_index(drop=True)
mini_df = pd.read_excel(results_dir + 'mini_summary_all.xlsx')

for i in reversed(range(len(mini_df))):
    if mini_df['hrs_incubation'][i]  == 0:
        continue
    if float(mini_df['hrs_incubation'][i]) < 20 and float(mini_df['hrs_incubation'][i]) > 30:
        mini_df = mini_df.drop([mini_df.index[i]])
mini_df.reset_index(inplace = True, drop = True)

for i in reversed(range(len(mini_df))):
    if float(mini_df['Average interevent interval (ms)'][i]) > 1000 :
        mini_df = mini_df.drop([mini_df.index[i]])
        continue
mini_df.reset_index(inplace = True, drop = True)

for i in reversed(range(len(mini_df))):
    if float(mini_df['Average amplitude (pA)'][i]) > 30 :
        mini_df = mini_df.drop([mini_df.index[i]])
        continue
mini_df.reset_index(inplace = True, drop = True)

mini_df.boxplot(column=['Average interevent interval (ms)'], by=['treatment'])
mini_df.boxplot(column=['Average amplitude (pA)'], by=['treatment'])

treatments = ['Ctrl', 'high K', 'TTX']
nums_dict = {}
for tr in treatments:
    nums_dict[tr] = len(mini_df[(mini_df['treatment'] == tr)])


#%%


#plot

# #remove outliers
# for i in reversed(range(len(results_df))):       
#     if results_df['Average interevent interval (ms)'][i] > 1000:
#         results_df = results_df.drop([results_df.index[i]])

inc_time_D1 = results_df[results_df['Incubation time'] == 0]
inc_time_D2 = results_df[results_df['Incubation time'] >= 22]

boxplot = inc_time_D1.boxplot(column=['Average amplitude (pA)'], by=['treatment', ])
boxplot = inc_time_D2.boxplot(column=['Average amplitude (pA)'], by=['treatment'])


#remove outliers
for i in reversed(range(len(results_df))):       
    if results_df['Average interevent interval (ms)'][i] > 1000:
        results_df = results_df.drop([results_df.index[i]])

inc_time_D1 = results_df[results_df['Incubation time'] == 0]
inc_time_D2 = results_df[results_df['Incubation time'] >= 22]

boxplot = inc_time_D1.boxplot(column=['Average interevent interval (ms)'], by=['treatment'])
boxplot = inc_time_D2.boxplot(column=['Average interevent interval (ms)'], by=['treatment'])


#%%

fig,axarr = plt.subplots(1,1, figsize=(8,8))
fig.patch.set_facecolor('white')
for tr in results_df['treatment'].unique().tolist():
    plot_data = results_df[results_df['treatment'] == tr]

    count, bins_count = np.histogram(plot_data['Average amplitude (pA)'], bins = 15)
    pdf = count / sum(count) #probabily distribution function
    cdf = np.cumsum(pdf) #cumulative distribution function
    plt.plot(bins_count[1:], cdf, label = tr)
plt.figlegend()

labels = results_df['treatment'].unique().tolist()
fig,axarr = plt.subplots(1,1, figsize=(8,8))
fig.patch.set_facecolor('white')
for tr in results_df['treatment'].unique().tolist():
    plot_data = results_df[results_df['treatment'] == tr]
    sorted_plot_data = plot_data.sort_values('Average amplitude (pA)')

    sorted_plot_data['cum_sum'] = sorted_plot_data['Average amplitude (pA)'].cumsum()
    #calculate cumulative percentage of column (rounded to 2 decimal places)
    sorted_plot_data['cum_percent'] = round(100 * sorted_plot_data.cum_sum / sorted_plot_data['Average amplitude (pA)'].sum(),2)
    plt.plot(sorted_plot_data['Average amplitude (pA)'], sorted_plot_data['cum_percent'])

    #plt.plot(base[:-1], len(data)-cumulative, c='green') #survival function

#%%
