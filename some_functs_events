#maybe useful when the meta event files are not perfect and OP and incubation times need to be added


op_dict = {}
for op in np.unique(np.array(fn_op)):
    OP = input('Which OP corresponds to ' + op)
    inc_time = float(input('What is the incubation time for ' + OP))
    patcher = input('Who is the patcher ? ' + op)
    op_dict[patcher + op] = [OP, inc_time]


sort.to_json('/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/meta_events/', 'up_to_OP220308', 'json_op_dict.json', op_dict)

OPs, incubation_times, patchers = [], [], []
for key, value in op_dict.items():
    op_dict_p = op_dict[key] 
    for i in range(len(results_df['Recording filename'])):
        if key[5:] == results_df['Recording filename'][i][:-7]:
            results_df['OP'].iloc[i] = value[0]
            results_df['incubation time'].iloc[i] = value[1]

            OPs.append(value[0])
            incubation_times.append(value[1])
            patchers.append(patcher)


results_df['OP'] = OPs
results_df['incubation time'] = incubation_times
#results_df.to_excel(results_path)


# %%

spontan_meta = pd.read_excel('/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/meta_events/2022-11-07spontan_meta.xlsx')

slices = []
for fn in results_df['Recording filename']:
    slic = spontan_meta['slice'][spontan_meta['Name of recording'] == fn]
    #patcher = meta_events['patcher'][meta_events['Name of recording'] == fn]
    slices.append(slic.tolist()[0])
    #patchers.append(patcher)

results_df.insert(2, 'slices', slices)

days, inc_times = [], []
for i in range(len(results_df)):
    if results_df['slices'][i][-2:] == 'D2':
        days.append('D2')
        inc_times.append(results_df['incubation time'][i])
    else:
        days.append('D1')
        inc_times.append(0)

results_df.insert(2, 'day', days)
results_df.insert(3, 'Incubation time', inc_times)


results_df = pd.read_excel('/Users/verjim/laptop_D_17.01.2022/Schmitz_lab/data/human/meta_events/final_results_df_spontan_summary.xlsx')


